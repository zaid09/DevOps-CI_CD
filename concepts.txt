Continuous Integration
The practice of automatically building and unit testing an entire application frequently, ideally on every source code check in.

Continuous Delivery
The practice of deploying every build to a production like environment and performing automated integration and acceptance testing.

Continuous Deployment
The practice of automatically deploying every build to production after it passes its automated tests.

Benefits of Continuous Delivery
- Empowering teams
- Lowered cycle time
- Better security
- Rhythm of practice
- More time to be productive

Tools to be used 
- Version Control - Github/SVN
- Build Tool/System - Jenkins
- Artifacts/Artifact Repo - Nexus
- Testing - Unit, Integration E2E Acceptance
- Deployment Server/Tool - Chef

Benefits of Artifacts
- Reliability
- Composability
- Security
- Shareability

FPM can be used to package up arbitrary files into Debs, RPMs, and many other package formats from any system.

Types of Testing
1. Unit Testing
2. Integration Testing
3. UI Testing
4. Security Testing

Unit Testing - Performed at build time on a single unit of code and/or artifact without use of external dependencies or deployment.
Example Tools: JUnit, XUnit, Rspec

Integration Testing - Performed as you bring together pieces of your application and as it needs to use external dependencies.
Example Tools: Abao/RAML and Serverspec

End-to-End(E2E)/UI Testing - Performed to exercise the full flow of your application in a same way an end user would.
Example Tools: Selenium and Protractor

Security Testing: Performed to look for flaws in your code and runtime to prevent compromises and leaking of data in production.
Example Tools: FindBugs, Fortify and Gauntlt.

Terminlogies
Shift left - Move testing as early as possible in the development process, ideally to the dev desktop.
Test fixture - A set of objects used to run a test in a well known environment.
System under test(SUT) - The application and system on which you are running tests.
Cycle Time - The time from when an item(feature or bug fix) is worked on until it is delivered into production.
Lead Time - The time taken from when an item(feature or bug fix) is requested until it is delivered into production.
Mock - Code designed to stand in for a piece of code that contains external dependencies to enable unit tests.

Testing Philosophy
Test-driven development(TDD) - The practice of writing a failing test first, and then writing the code that causes the test to pass.
Behaviour-driven development(BDD) - The practice of writing tests in a simple end-user-behaviour-centric language.
Acceptance test-driven development(ATDD) - The practice of agreeing on acceptance tests before development to establish what is to be delivered.

Testing Metrics
1. Cycle time - time from start of work to delivery
2. Velocity - value delivered per unit time
3. Customer satisfaction - how well a product/service met the customer's needs. NPS scores and bug reports work well here.
